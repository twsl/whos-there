[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"
pattern = "default-unprefixed"

[tool.poetry]
name = "whos-there"
version = "0.1.5-post.110+1e86ce1"
description = "The spiritual successor to knockknock for PyTorch Lightning, get notified when your training ends"
authors = ["twsl <45483159+twsl@users.noreply.github.com>"]
maintainers = ["twsl <45483159+twsl@users.noreply.github.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "whos_there", from = "src"}]
homepage = "https://github.com/twsl/whos-there"
repository = "https://github.com/twsl/whos-there"
documentation = "https://github.com/twsl/whos-there"
keywords = [
  "python",
  "pytorch",
  "pytorch-lightning",
  "machine-learning",
  "deep-learning"
]

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [
    "Topic :: Software Development"
]

[tool.poetry.dependencies]
python = "^3.8.1"
pytorch-lightning = ">=2.0,<3.0"
python-telegram-bot = "^20.0"
requests = "^2.28.2"
torch = ">=1.11.0, !=2.0.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
black = "^23.3.0"
isort = {extras = ["colors"], version = "^5.11.4"}
mypy = ">=0.991,<1.5"
mypy-extensions = ">=0.4.3,<1.1.0"
flake8 = "^6.0.0"
safety = "^2.3.5"
bandit = "^1.7.4"
pre-commit = "^3.3.1"
pytest-cov = "^4.0.0"
coverage = "^7.2.5"
flake8-docstrings = "^1.6.0"
pyupgrade = "^3.3.1"
ruff = ">=0.0.275,<0.0.281"

[tool.poetry.group.debug]
optional = true

[tool.poetry.group.debug.dependencies]
ipdb = "^0.13.9"
line_profiler = "^4.0.3"

[tool.poetry.urls]
issues = "https://github.com/twsl/whos-there/issues"

[tool.coverage.run]
branch = true
omit = [
    "tests/*",
]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug:",
    "if debug:",
    "if DEBUG:",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
]

[tool.ruff]
target-version = 'py310'
select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # Error
    "F",  # pyflakes
    "I",  # isort
    "ISC", # flake8-implicit-str-concat
    "N",  # pep8-naming
    "PGH",  # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "Q",  # flake8-quotes
    "S",  # bandit
    "SIM",  # flake8-simplify
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # Warning
    "YTT", # flake8-2020
]

exclude = [
    "migrations",
    "__pycache__",
    "manage.py",
    "settings.py",
    "env",
    ".env",
    "venv",
    ".venv",
]

ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D401",
    "E402",
    "E501",
    "F401",
    "TRY003",  # Avoid specifying messages outside exception class; overly strict, especially for ValueError
]
line-length = 120  # Must agree with Black

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "chr",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "S101",  # use of "assert"
    "S102",  # use of "exec"
    "S106",  # possible hardcoded password.
    "PGH001",  # use of "eval"
]

[tool.ruff.pep8-naming]
staticmethod-decorators = [
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.ruff.isort]
known-first-party = ["whos_there"]
force-sort-within-sections = true

[tool.black]
line-length = 120
target_version = ['py310']
color = true
exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''

[tool.isort]
py_version = 310
line_length = 120
profile = "black"
include_trailing_comma = true
multi_line_output = 3
indent = 4
lines_after_imports = -1
force_sort_within_sections = true
#color_output = true # causes issues with vs code formatting

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = 3.10
pretty = true
show_traceback = true
color_output = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
